- [X] Move to a struct-based primitive nodes rather than an enum based.
  - The problem with enum-based node is that it is quite difficult to extend with sub-classes
  - However, for structs it is as simple as making sure that, probably this needs some scary
    template-fu, which is not quite bad in itself.
- [X] Implement visitors
  - [X] IdentityMapper
  - [X] Fold to a different type?
    - Like a StringifyMapper?
  - [X] Rewrite IdentityMapper using FoldableMapper?
    - Tried this and was unsuccessful.
    - This should mostly be done using macros.
  - [X] IdentityMapperWithContext
  - [X] MutIdentityMapper?
  - [X] CombineMapper
  - [X] CombineMapperWithContext
  - [X] WalkMapper
  - [X] DependencyMapper
- [X] Force Expression to be derived from:
  - [X]  ~std::fmt::Display~
  - [X] ~std::cmp::Eq~
  - [X] Probably all the mappers that we implement.
- [X] String parsing.
- [ ] Do the Binary Ops _have_ to to "binary", can they instead be rewritten to
  take arbitrary number of operands like pymbolic?
- Idea: We should probably implement something like IdentityMappers as derive macros.
- [X] Implement get_dependencies
- [ ] Implement substitute
- [ ] Implement evaluate
- [ ] Make a deduplicating helper function
- [ ] Implement equality mapper
- [X] Implement Bitwise Operators
- [ ] Implement Cached variants of mappers
- [ ] Implement out sub-language as the `eval!` macro
- [ ] Add Continuous Integration
- [X] ~expression_trees~ is a terrible name, probably rename it to something else?
  - [X] Rename to SymOxide
- [ ] Start working on a design doc
- [ ] Visualize to graphviz
- [ ] Make public
